// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// NextAuth.js required models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String    @id @default(cuid())
  name              String?
  email             String    @unique
  emailVerified     DateTime?
  image             String?
  
  // Custom fields for furry community
  username          String?   @unique
  password          String?
  furryName         String?
  profilePictureUrl String?
  fursuitGallery    Json?
  characterDetails  Json?
  socialMediaLinks  Json?
  interestTags      String[]  @default([])
  
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relations
  accounts          Account[]
  sessions          Session[]
  hostedEvents      Event[]   @relation("HostedEvents")
  rsvps             RSVP[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Event {
  id                String    @id // No default, will be set manually
  title             String
  coverImageUrl     String?
  description       String
  startDate         DateTime
  endDate           DateTime
  locationAddress   String?
  naverMapUrl       String?
  isLocationPublic  Boolean   @default(false)
  cost              Float     @default(0)
  attendeeCap       Int?
  hostId            String
  host              User      @relation("HostedEvents", fields: [hostId], references: [id])
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  eventRules        String?
  tags              String[]
  rsvps             RSVP[]
}

model RSVP {
  id            String      @id @default(cuid())
  userId        String
  user          User        @relation(fields: [userId], references: [id])
  eventId       String
  event         Event       @relation(fields: [eventId], references: [id])
  status        RSVPStatus
  paymentStatus PaymentStatus
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@unique([userId, eventId])
}

enum RSVPStatus {
  ATTENDING
  CONSIDERING
  NOT_ATTENDING
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  NOT_APPLICABLE
}
